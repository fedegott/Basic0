{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Palatino-Roman;\f2\fmodern\fcharset0 CourierNewPSMT;
\f3\fnil\fcharset0 Verdana;\f4\fnil\fcharset0 Menlo-Regular;\f5\fnil\fcharset0 Georgia;
\f6\fmodern\fcharset0 Courier;\f7\fswiss\fcharset0 ArialMT;\f8\fnil\fcharset0 Monaco;
\f9\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red38\green34\blue42;\red252\green252\blue252;\red0\green0\blue83;
\red214\green255\blue213;\red67\green67\blue67;\red255\green255\blue255;\red0\green0\blue0;\red38\green38\blue38;
\red83\green83\blue83;\red241\green241\blue241;\red83\green85\blue2;\red135\green135\blue135;\red53\green145\blue93;
\red13\green95\blue24;\red36\green38\blue41;\red235\green236\blue237;\red104\green26\blue29;\red114\green121\blue129;
\red27\green29\blue31;\red43\green39\blue19;\red184\green14\blue61;\red247\green238\blue241;\red41\green76\blue105;
\red231\green236\blue240;\red184\green73\blue12;\red242\green242\blue242;\red50\green91\blue142;\red29\green111\blue63;
\red94\green141\blue197;\red13\green0\blue129;\red37\green127\blue159;\red8\green25\blue107;\red53\green118\blue190;
}
{\*\expandedcolortbl;;\cssrgb\c20000\c18039\c21961;\cssrgb\c99216\c99216\c99216;\cssrgb\c0\c0\c40000;
\cssrgb\c86667\c100000\c86667;\cssrgb\c33333\c33333\c33333;\cssrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;\cssrgb\c20000\c20000\c20000;
\cssrgb\c40000\c40000\c40000;\cssrgb\c95686\c95686\c95686;\cssrgb\c40000\c40000\c0;\cssrgb\c60000\c60000\c60000;\cssrgb\c25098\c62745\c43922;
\cssrgb\c0\c43922\c12549;\cssrgb\c18824\c20000\c21176;\cssrgb\c93725\c94118\c94510;\cssrgb\c49020\c15294\c15294;\cssrgb\c52157\c54902\c57647;
\cssrgb\c14118\c15294\c16078;\cssrgb\c22353\c20000\c9412;\cssrgb\c78039\c14510\c30588;\cssrgb\c97647\c94902\c95686;\cssrgb\c20784\c37255\c48627;
\cssrgb\c92549\c94118\c95294;\cssrgb\c77647\c36471\c3529;\cssrgb\c96078\c96078\c96078;\cssrgb\c25098\c43922\c62745;\cssrgb\c12549\c50196\c31373;
\cssrgb\c43922\c62745\c81569;\cssrgb\c6275\c6275\c58039;\cssrgb\c16863\c56863\c68627;\cssrgb\c2353\c15686\c49412;\cssrgb\c25882\c54510\c79216;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}.}{\leveltext\leveltemplateid101\'01.;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}.}{\leveltext\leveltemplateid201\'01.;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww14360\viewh12920\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Jupyter notebook in terminal\
\
Or use ipython in terminal\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 Python\
\
DAX.ix[\'912017-03-6\'92] \'97> ix selects index\
\
\
in terminal open Python typning \'93python\'94 and Ipython typing \'93ipython\'94\
\
\pard\pardeftab720\sl400\partightenfactor0

\f1\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
Strings are created by putting a sequence of characters in quotes. Strings can be surrounded by single quotes, double quotes or triple quotes.\
Strings are immutable.\
String is a sequence of characters (unicode characters)\
\
\
indexing \
slicing =  
\f2\fs30\fsmilli15300 \cf4 \cb5 s[begin: end: step]\

\f1\fs36 \cf2 \cb3 \
\
lists are array where variables don\'92t need t have the same type and the list can grow and mutable .  definition= ordered collection of objects \
\
tuples ar faster than lists and can be used as keys in dictionaries while lists can\'92t\
\
len() \'97> length of string, string or tuple\
\
\pard\pardeftab720\sl360\partightenfactor0

\f3\fs30\fsmilli15300 \cf6 \cb7 It's easy to check, if an item is contained in a sequence. We can use the "in" or the "not in" operator for this purpose.\
\
\pard\pardeftab720\sl340\partightenfactor0

\f2 \cf4 \cb5 "a" in lista\
\pard\pardeftab720\sl360\partightenfactor0

\f1\fs36 \cf2 \cb3 \
\pard\pardeftab720\sl400\partightenfactor0
\cf2 Compiler: 
\f3\fs30\fsmilli15300 \cf6 \cb7 Definition: A compiler is a computer program that transforms (translates) source code of a programming language (the source language) into another computer language (the target language). In most cases compilers are used to transform source code into executable program, i.e. they translate code from high-level programming languages into low (or lower) level languages, mostly assembly or machine code.\
\
Interpreter: \cb1 Definition: An interpreter is a computer program that executes instructions written in a programming language. It can either\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls1\ilvl0\cf6 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
execute the source code directly or\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
translates the source code in a first step into a more efficient representation and executes this code\
\pard\pardeftab720\sl400\partightenfactor0

\f1\fs36 \cf2 \cb3 \
source code (interpreted) Byte code (executed) Virtual machine (PVM)\
\
block. instead of \{\} to separate blocks python uses indentation\
 Basic or fortran didn\'92t have and had to use go to loops\
\
\pard\pardeftab720\sl360\partightenfactor0

\f3\fs30\fsmilli15300 \cf6 \cb7 Loops and Conditional statements end with a colon ":" - the same is true for functions and other structures introducing blocks.\'a0\
\pard\pardeftab720\sl360\partightenfactor0

\f1\fs36 \cf2 \cb3 \
\pard\pardeftab720\sl400\partightenfactor0

\f0\fs28 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 """print(a)\uc0\u8232 """ 
\fs28 \'97> bracket comment\
\
# \'97> comment\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs24 \cf0 return needs to be with SAME INDENTATION AS LAST STATEMENT\
ei. for xxxx:\
	 yyy\
	return 0\
\
\
2783+ 29681+-697+1246\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f4 \cf8 doing a[i,j] is the same as a[i][j] for numpy array\
\
standard data type: numbers, string, lists, tuple, dictionary\
\
tuple are like lists but are immutable in size and elements\
Dict is a kind of hash table. It\'92s unordered \
string  use \'93 \'93 or \'91 \'91\
list use [ ]\
tuple use ( )\
dict enclosed by \{\} e.i. a = \{\'91name\'92 : \'91John\'92\}\
\
\pard\pardeftab720\sl340\partightenfactor0

\f5\fs30 \cf9 \expnd0\expndtw0\kerning0
Generally in programming,\'a0
\i method
\i0 \'a0refers to a function which is part of a class, whereas\'a0
\i function
\i0 \'a0refers to a function on its own.\
So a standalone function in Python is a 'function', whereas a function that is an attribute of a class or an instance is a 'method'.\
\
Why the distinction? One reason is to facilitate\'a0
\i binding
\i0 . A method can be either bound or unbound; when you access it directly through the class, as in\'a0
\f0 \cf10 \cb11 C\cf12 .\cf10 g
\f5 \cf9 \cb1 , it is unbound. When you access it through an instance of the class, as in\'a0
\f0 \cf10 \cb11 inst\cf12 .\cf10 g
\f5 \cf9 \cb1 , the method becomes becomes bound to the instance\'a0
\f0 \cf10 \cb11 inst
\f5 \cf9 \cb1 , which means that when you call it,\'a0
\f0 \cf10 \cb11 inst
\f5 \cf9 \cb1 \'a0will be passed as the first argument.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls2\ilvl0
\f0\fs26 \cf12 \cb11 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
>>>\cf10  C\cf12 .\cf10 g\cf12 (\cf10 inst\cf12 )
\f6 \cf13 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls2\ilvl0
\f0 \cf14 \cb11 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
0
\f6 \cf13 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls2\ilvl0
\f0 \cf12 \cb11 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
>>>\cf10  inst\cf12 .\cf10 g\cf12 ()
\f6 \cf13 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls2\ilvl0
\f0 \cf14 \cb11 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
0\
\pard\tx720\pardeftab720\sl300\partightenfactor0

\f6 \cf13 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0

\f5\fs30 \cf9 But you don't want\'a0
\i all
\i0 \'a0methods of a class to behave this way. There are also constructs like\'a0
\f0 \cf10 \cb11 staticmethod
\f5 \cf9 \cb1 s which don't bind.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls3\ilvl0
\f0\fs26 \cf12 \cb11 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
>>>\cf10  
\b \cf15 class
\b0 \cf10  C\cf12 (\cf10 object\cf12 ):
\f6 \cf13 \cb1 \
\ls3\ilvl0
\f0 \cf12 \cb11 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
...\cf10      \cf14 @staticmethod
\f6 \cf13 \cb1 \
\ls3\ilvl0
\f0 \cf12 \cb11 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
...\cf10      
\b \cf15 def
\b0 \cf10  f\cf12 ():
\f6 \cf13 \cb1 \
\ls3\ilvl0
\f0 \cf12 \cb11 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
...\cf10              
\b \cf15 return
\b0 \cf10  \cf14 0
\f6 \cf13 \cb1 \
\ls3\ilvl0
\f0 \cf12 \cb11 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
...\cf10  
\f6 \cf13 \cb1 \
\ls3\ilvl0
\f0 \cf12 \cb11 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
>>>\cf10  C\cf12 .\cf10 f
\f6 \cf13 \cb1 \
\ls3\ilvl0
\f0 \cf12 \cb11 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
<\cf10 function f at \cf14 0x102e227d0\cf12 >
\f6 \cf13 \cb1 \
\ls3\ilvl0
\f0 \cf12 \cb11 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
>>>\cf10  C\cf12 ().\cf10 f
\f6 \cf13 \cb1 \
\ls3\ilvl0
\f0 \cf12 \cb11 \kerning1\expnd0\expndtw0 {\listtext	.	}\expnd0\expndtw0\kerning0
<\cf10 function f at \cf14 0x102e227d0\cf12 >
\f6 \cf13 \cb1 \
\pard\pardeftab720\sl340\partightenfactor0

\f5\fs30 \cf9 \
When you use a\'a0
\f0 \cf10 \cb11 staticmethod
\f5 \cf9 \cb1 , your function won't get turned into a method at all, and it won't bind. So you just get your ordinary function.\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0

\f3\fs30\fsmilli15300 \cf6 \cb7 Instance attributes are owned by the specific instances of a class. This means for two different instances the instance attributes are usually different\
\
Instance attributes are owned by the specific instances of a class. This means for two different instances the instance attributes are usually different. Therefore they have the same value for every instance.\'a0\
\
\
x.size() or len(x) to get size of object \
\
Numpy\
np.arange, np.array, a.shape, np.linspace(), a.reshape(),d.sort(),d.type(),d.mean,d.std()\
np.random.normal(0,1,[4,4]), d[0,0],d[:,3], d.copy() (otherwise if do e = d, e will point at d and changes in d will me transmited to e),\
x.shape(multid numpy object)\
np.random.shuffle(x)\
\
Pandas\
a =pd.Series(index=[\'91a\'92,\'92b\'92], data=[\'913.14\'92,\'924.56\'92]\
a.values, a.data, \
\
Matplotlib\
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf16 \cb17 fig, ax = plt.subplots() for subplots sames as fig = plt.figure()\
ax = fig.add_subplot(\cf18 111\cf16 )\
\
\
\pard\pardeftab720\partightenfactor0
\cf19 #creating the arrays for testing\cf16 \
x = np.arange(\cf18 1\cf16 , \cf18 100\cf16 )\
y = np.sqrt(x)\
\cf19 #1st way\cf16 \
plt.plot(x, y)\
\cf19 #2nd way\cf16 \
ax = plt.subplot()\
ax.plot(x, y)\
\cf19 #3rd way\cf16 \
figure = plt.figure()\
new_plot = figure.add_subplot(\cf18 111\cf16 )\
new_plot.plot(x, y)\
\
\
\pard\pardeftab720\partightenfactor0

\f7\b\fs30 \cf20 \cb7 The first way
\b0  let to plot just one figure with (x,y) coordinates. If you just want to get one graphic, you can use this way.\cb1 \

\b \cb7 The second way
\b0  let to plot one or several figure(s) in the same window. As you write it, you will plot just one figure, but you can make something like this:\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf16 \cb17 fig1, ((ax1, ax2), (ax3, ax4)) = plt.subplots(\cf18 2\cf16 , \cf18 2\cf16 )\cf21 \
\pard\pardeftab720\partightenfactor0

\f7\fs30 \cf20 \cb7 You will plot 4 figures which are named ax1, ax2, ax3 and ax4 each one but on the same window. This window will be just divided in 4 parts with my example.\cb1 \

\b \cb7 The third way
\b0  : I didn't use it, but you can find documentation. \'97> check page 263  (pythons data science handbook)\
\
fig, ax = plt.subplots(2,2)\
ax[0,0].plot(x,y) or use ax[0][0]\
ax[1,0].plot(x,y*2) or use ax[1][0]\
\
need \'93fig, ax\'94 otherwise won\'92t work\
\
if need to add several plots to the same plot use\
ax = plt.axes() no need for \'93fig = plt.figure\'94\
and do ax.plot(x,y,\'92r\'92,lable=\'911\'92) then ax.plot(x,y*2,\'92g\'92,label=\'912\'92), etc\
then\
ax.set(xlabel = \'91a\'92, title=\'91eee\'92)\
ax.legend(loc= \'91lower left\'92)\
plt.axis(\'91equal\'92)\
\
\
CSV = comma separated value \'93xxx\'94,\'94xxxx\'94,\'94xxx\'94\
\
\
type(x) \'97> shows which kind of data\
>>> type(a)\
<class 'int'>\
>>> type(end)\
<class 'datetime.date'>\
\
\
						
\fs40 	\ul 	Intro\ulnone \
http://interactivepython.org/runestone/static/pythonds/Introduction/WhyStudyDataStructuresandAbstractDataTypes.html\

\fs30 \
\pard\pardeftab720\partightenfactor0

\fs40 \cf20 -Computer Science = problem solving. Programming is part of CS
\fs30 \

\fs40 -Python is interpreted language\
-Abstraction = hide implementation, just use methods e.i. function w/o knowing how it was implemented. Like driving a car w/o knowing anything about the engine. Interface= \cf9 This interface is the way we as users communicate with the underlying complexities of the implementation, interface are the functions w/o the implementation \
-An abstract data type, sometimes abbreviated ADT, is a logical description of how we view the data and the operations that are allowed without regard to how they will be implemented. This means that we are concerned only with what the data is representing and not with how it will eventually be constructed. By providing this level of abstraction, we are creating an encapsulation around the data. The idea is that by encapsulating the details of the implementation, we are hiding them from the user\'92s view\
-The user (client) interacts with the interface, using the operations that have been specified by the abstract data type. The abstract data type is the shell that the user interacts with. The implementation is hidden one level deeper. The user is not concerned with the details of the implementation.\
-The implementation of an abstract data type, often referred to as a data structure, will require that we provide a physical view of the data using some collection of programming constructs and primitive data types. \
- \cf22 \cb23 >>>\cf9 \cb7  prompt from the interpreter\
-Literal = values. E.i var1= 5, where 5 is the literal\cf20 \
-identifiers = names variables, functions, etc.\
Assignment statements \'97> associate name withs values. 
\b Variable will hold reference to a piece of data but will not hold the data itself
\b0 . So A.S change the reference being held by the variable\
-\'93Evaluated\'94\
-feature of python, same variable can refer to many different data types\
-primitive data type = numeric (int, float), boolean.  built in collection = data types (List, strings, tuples, sets, dictionaries)\
-Class =  description of what data look like(STATE), and what the data can do (BEHAVIOR). Classes are ADT. Data items are OBJECTS. An object is an INSTANCE of a class.\
-OPERATORS e.i.. (+, -, ==, >=, etc)\
-Built-in data type = COLLECTIONS = list, strings and tuples are ORDERED collections. Sets and dictionaries are UNORDERED collections\
Lists can have a data objects of different types (heterogeneous). OPERATIONS of lists: INDEXING ([]), concatenation, repetition, membership (in), length (Len), SLICING ([:]).\
METHODS of lists:  append (add element to end of list), extend (appends element from iterable), insert (insert in specific position), pop (remove & return last item), pop (i) (removes & RETURN ith item), sort, reverse, del (i) (delete item in ith positions, does not return), INDEX( returns FIRST occurrence), count, remove (remove first occurrence)\
- dot notation, to ask object to invoke a method\
-Strings = sequential collection of characters (numbers or letters)\
Strings has same operations as Lists. Strings methods: count, 
\b FIND
\b0  (return index of first occurrence), 
\b SPLIT
\b0  (x)). Splits returns list of strings split by x as division points. Can index in string e.i. word[2]. JOIN, concatenates strings. STRIP(xxx) \'97> remove xxx from beginning and end\
a = \'91how are you\'92\
b = a.split()\
c = \'91-\'91.join(b)\
c \'97> how-are-you\
\
String are differentiated from literals by using quotation marks. You can\'92t delete or append a string (immutable) but concatenate another list with the previous list and a character for e.i. b = a + \'93n\'94. Only way to change a string is using REPLACE (old ,new)\
Lists are mutable but Strings and Tuples are IMMUTABLE.\
-Set is an UNORDERED collection and it\'92s IMMUTABLE and does NOT allow DUPLICATE. Heterogeneous e.i a = \{1 ,\'92cat\'92 ,2\}. Sets Operations membership (in), length (Len). Methods: union, intersection, difference (same as in mathematics), is subset, add, remove, pop, clear. (Immutable, can add and remove items but not modify them)\
-Dictionaries: collection of UNORDERED associated pairs oft item which are a KEY and a VALUE. \{\'93Iowa\'94: \'93Wisconsin\'94\}. Do NOT allow DUPLICATES.\
Both sets and dictionaries use \{\} and don\'92t allow duplicates.  Dictionaries are mutable, sets are immutable. Both are UNORDERED (keys can change order)\
-Dictionaries OPERATIONS = [], in, del\
METHODS: keys, values, items(returns key-value pairs), 
\b get
\b0  (input key and get a value)\
-convert set to list using or tuples\'97> list ( \{xxx\} ) or set( [xxx]) \
-to remove duplicates, make sets instead of lists\
\
\pard\pardeftab720\partightenfactor0
\cf0 -Arguments that are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments. For instance, the built-in {\field{\*\fldinst{HYPERLINK "https://docs.python.org/2/library/functions.html#range"}}{\fldrslt \cf24 range()}} function expects separate start and stop arguments. If they are not available separately, write the function call with the \cb25 *\cb7 -operator to unpack the arguments out of a list or tuple\'97> *args\
-Dictionaries can deliver keyword arguments with the \cb25 **\cb7 -operator: \'97> deliver value from the key\cf20 \
-when you don\'92t know how many arguments will be in the function, use packing *args  to pack all arguments in a tuple\'97> def sum (*args):\
\
- type( wordlist) \'97> list\
-3 types of statements: assignment statements, operation statements or CONTROL FLOW\
-iterate statement: for, while, SELECTION statement: if else, if elif\
-while: iterate as long as condition true, for: to iterate collections.\
If, else: if once. If many if else if else\'97> use if, elif (for NESTED selection statements).\
\
- Name = input(\'93please enter your name\'94). Whatever user enter will be stored in Name. The variable will return a STRING. If need another type do: float(Name)\
Print() has FORMATTED STRINGS. 1) Print (Name, \'93is\'94, age,\'94years old\'94) 2) print(%s is %d years old.\'94 % (Name, age)) % is called FORMAT OPERATOR. \
Can use both ways 1) and 2)\
Format modifier e.i. %5.2f\
\pard\pardeftab720\partightenfactor0
\cf26 \cb27 >>> \cf9 itemdict \cf10 =\cf9  \{\cf28 "item"\cf9 :\cf28 "banana"\cf9 ,\cf28 "cost"\cf9 :\cf29 24\cf9 \} \'97> dictionary\
\cf26 >>> \cf15 print\cf9 (\cf28 "The \cf30 %(item)s\cf28  costs \cf30 %(cost)7.1f\cf28  cents"\cf10 %\cf9 itemdict)
\f8\fs26 \
\pard\pardeftab720\partightenfactor0

\f7\fs40 \cf20 \cb7 can use dictionary in print an use a value per key\
\
For loop: \'97> allows to iterate collection\
wordlist = ['cat','dog','rabbit']\
letterlist = [ ]\
for aword in wordlist:\
   t)\
 for aletter in aword:\
        letterlist.append(aletter)\
print(letterlist)\
\
While do, for loop \'97> iteration\
If else (if elif or if else if)\'97> selection \
\
-List comprehension: allows to create a list based on some processing criteria.structure is: xxx = [ xxx FOR xxx IN xxx]\
Need to use [], FOR and IN as above \
\
-2 type of error: syntax error and logic error. In logic error program executes but gives wrong result. Logic error sometimes lead to runtime errors (program terminates), which are called EXCEPTIONS. Try -  except, where except \'93catches\'94 the exception.\
\
- a = input(\'91Please enter an integer\'92)\
- define a functions \'97> def square(n):\
						return xxx\
-A parameter is a variable which is part of the 
\b method\'92s signature (method declaration)
\b0 . An argument is an expression used when calling the method.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf31 \cb17 void\cf16  \cf32 Foo\cf16 (\cf32 int\cf16  i, \cf32 float\cf16  f)\
\{\
    \cf19 // Do things\cf16 \
\}\
\
\cf31 void\cf16  \cf32 Bar\cf16 ()\
\{\
    \cf32 int\cf16  anInt = \cf18 1\cf16 ;\
    \cf32 Foo\cf16 (anInt, \cf18 2.0\cf16 );\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf20 \cb7 Here \cb17 i\cb7  and \cb17 f\cb7  are the parameters, and \cb17 anInt\cb7  and \cb17 2.0\cb7  are the arguments.\
-another way of saying it: \cb17 argument\cb7  is the value/variable/reference being passed in, \cb17 parameter\cb7  is the receiving variable used w/in the function/block.\
Or, a method has parameters and takes arguments
\fs26 \

\fs40 \
-\cf9 Classes allow programmers to implement abstract data types.\cf20 \
-Classes: The constructor defines the way in which data objects are created\
-The first methods all classes should provide is the constructor \
-Self: is a special parameter that will always be used as a reference back to the object itself def __init__ (self, x, y):\
-features of object-oriented programming: abstraction, encapsulation, inheritance & polymorpihsm\
-Self\cf9  must always be the FIRST formal parameter; however, it will NEVER be given an actual parameter value upon invocation
\f9\fs28 \

\f7\fs40 \cf20 -\cf9 To CREATE an INSTANCE of the \cf22 \cb23 Fraction\cf9 \cb7  class, we must INVOKE the constructor. This happens by using the name of the class and passing actual values for the necessary state (note that we never directly \cf22 \cb23 invoke __init__\cf9 \cb7 )\cf20 \
-\cf9 In Python, all classes have a set of STANDARD METHODS that are provided but MAY NOT work properly. One of these, \cf22 \cb23 __str__\cf9 \cb7 , is the method to convert an object into a string. The default implementation for this method is to return the instance address string as we have already seen. What we need to do is provide a \'93better\'94 implementation for this method. We will say that this implementation 
\b overrides
\b0  the previous one, or that it redefines the method\'92s behavior. To do this, we simply define a method with the name \cf22 \cb23 __str__\cf9 \cb7  and give it a new IMPLEMENTATION\
\cf20 \
\pard\pardeftab720\partightenfactor0
\cf15 \cb27 def\cf9  \cf33 __str__\cf9 (\cf15 self\cf9 ):\
    \cf15 return\cf9  \cf15 str\cf9 (\cf15 self\cf10 .\cf9 num)\cf10 +\cf28 "/"\cf10 +\cf15 str\cf9 (\cf15 self\cf10 .\cf9 den)\
\pard\pardeftab720\partightenfactor0
\cf20 \cb7 -\cf9 Programmers can override standard methods as well as create new methods.\cf20 \
\
\
-Shallow equality: f1=f2 only true if they are references to the same object\
-Deep equality: equality by values not by reference. \
-\cf9 Assume we have two \cf22 \cb23 Fraction\cf9 \cb7  objects, \cf22 \cb23 f1\cf9 \cb7  and \cf22 \cb23 f2\cf9 \cb7 . \cf22 \cb23 f1==f2\cf9 \cb7  will only be \cf22 \cb23 True\cf9 \cb7  if they are references to the same object. Two different objects with the same numerators and denominators would not be equal under this implementation. This is called shallow equality \
-We can create deep equality (see \cf34 Figure 7\cf9 )\'96equality by the same value, not the same reference\'96by overriding the \cf22 \cb23 __eq__\cf9 \cb7  method. The \cf22 \cb23 __eq__\cf9 \cb7  method is another standard method available in any class. The \cf22 \cb23 __eq__\cf9 \cb7  method compares two objects and returns \cf22 \cb23 True\cf9 \cb7  if their values are the same, \cf22 \cb23 False\cf9 \cb7  otherwise.\
\cf20 \
-Inheritance: Child class and parent class or subclasses and superclasses\
-\cf9 Python also has a function called \cf22 \cb23 super\cf9 \cb7  which can be used in place of explicitly naming the parent class. This is a more general mechanism, and is widely used, especially when a class has more than one parent.\
-A class constructor should always invoke the constructor of its parent before continuing on with its own data and behavior.\
-Now, with the \cf22 \cb23 Connector\cf9 \cb7  class, we say that a \cf22 \cb23 Connector\cf9 \cb7  HAS-A \cf22 \cb23 LogicGate\cf9 \cb7  meaning that connectors will have instances of the \cf22 \cb23 LogicGate\cf9 \cb7  class within them but are not part of the hierarchy. When designing classes, it is very important to distinguish between those that have the IS-A relationship (which requires inheritance) and those that have HAS-A relationships (with no inheritance).\
\
\
2. Analysis\
\
-In order to answer this question, we need to remember that there is an important difference between a program and the underlying algorithm that the program is representing. As we stated in Chapter 1, an algorithm is a GENERIC, step-by-step list of instructions for solving a problem. It is a method for solving any instance of the problem such that given a particular input, the algorithm produces the desired result. A program, on the other hand, is an algorithm that has been encoded into some programming language. There may be many programs for the same algorithm, depending on the programmer and the programming language being used.\
-best algorithm using more efficiently the resources \'97> resources are either spacer memory, or time required (execution time or running time of the Algo) via a benchmark analysis (it\'92s DEPENDENT on the specific machine)\
-If each of these steps is considered to be a basic unit of computation, then the execution time for an algorithm can be expressed as the number of steps required to solve the problem. \
-\cf31 \cb17 for\cf16  i \cf31 in\cf16  range(N): \'97>\cf20 \cb7 Notice that the for loop runs from 0 to N-1, for a total of N operations\
\
-Time complexity and space complexity (memory required for the implementation)\
-logn = requires dividing something in half (binary search, trees) or multiplying by 2\
-linearithmic (nlogn) = generally occur in Divide and Conquer Algo\
Exponential (2^x)= usually occurs in exhaustive search\
log2(1)= 0\
log2 (10)= 3.32\
log2(100)= 6.64\
log2(1000)= 9.96\
Every x10 in size is only x2 bigger in log base 2 (and +1 in Log10)\
\
Log10(1)=0\
log10(10) = 1\
log10(100)=2\
log10(1000)=3\
\
Python optimised the implementation of the most common methods for Lists:\
Indexing, Assignment to an index position, append and pop() are O(1), all others are O(n)\
}